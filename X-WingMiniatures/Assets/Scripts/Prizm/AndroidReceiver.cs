#if UNITY_ANDROID

using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public class AndroidReceiver : MonoBehaviour {


	/* NOTE:
	 *     
	 * make sure to put the following block into the AndroidManifest.xml generated by Unity.  
	 * this goes inside the <application> ..... </application> tags
	 * 
	 * Then put the AndroidManifest.xml file into Assets/Plugins/Android as demonstrated by AndroidTestSuite Unity project
	 * 
	 * 
	<receiver android:name="com.prizm.unityreceiver.Receiver" >
	  <intent-filter>
   	    <action android:name="com.prizm.rflayer.UnityMessage" />
 	  </intent-filter>
    </receiver>
	 * 
	 * 
	 * 
	 * Also put the same classes.jar into your Assets/Plugins/Android folder
	 * 
	 * */

	private string extendedClassName = "com.prizm.unityreceiver.Receiver";

	private GameManager gameManager;

	string javaMessage = "uninitialized from Unity";

	int xPos;
	int yPos;
	string ID = "";
	public int num = 0;



	void Start(){
		gameManager = GameObject.Find ("GameManager").GetComponent<GameManager> ();

		//only call this once per game (it will crash if you call it more than once, in which case you have to call it again to restart
		StartScanService ();
	}


	//checks fo a message every update loop for an RFID Scan message
	void Update()
	{    

		//num++;
		using (AndroidJavaClass ajc = new AndroidJavaClass(extendedClassName)) {
			if (ajc.GetStatic<bool> ("hasMessage")) {
				//OtherSetText();
				javaMessage = ajc.GetStatic<string>("recv");

				xPos = ajc.GetStatic<int>("xCoord");
				yPos = ajc.GetStatic<int>("yCoord");
				xPos = convertTouchCoordinateX(xPos);
				yPos = convertTouchCoorindateY(yPos);
				yPos = Camera.main.pixelHeight - yPos;
				ID = javaMessage;
				ID = filterRFID (ID);
				Debug.Log ("Java Plugin has a message for us:" + javaMessage + " " + ID.ToString() + "THE LENGTH OF ID IS: "+ ID.Length);
				gameManager.createMsgLog("java message: " + javaMessage);
				//RFManagerReference.prizmFactory.RFIDEventManager (ID, touchType.smartTouchStart, new Vector3 (xPos, yPos, 0));

				ajc.SetStatic<bool>("hasMessage", false);
			}
		}

	}

	private string filterRFID(string ID){
		if (ID.Length == 12) {
			return ID.Substring (0, ID.Length - 1);
		} else if (ID.Length == 14) {
			return ID.Substring (1, ID.Length - 3);
		} else if (ID.Length == 13) {
			return ID.Substring (1, ID.Length - 2);
		}else
			return ID;
	}

	private int convertTouchCoordinateX(int pos){
		float newPos = 0f;
		newPos = pos / 32768.0f;
		newPos = newPos * (float)Camera.main.pixelWidth;
		return (int)newPos;
	}
	private int convertTouchCoorindateY(int pos){
		float newPos = 0f;
		newPos = pos / 32768.0f;
		newPos = newPos * (float)Camera.main.pixelHeight;
		return (int)newPos;
	}

	//used to manually get the 'recv' text from android plugin
	public String ReceivedFromAndroid() {
		String message = "empty";
		using (AndroidJavaClass ajc = new AndroidJavaClass(extendedClassName)) {
			message = ajc.GetStatic<string>("recv");
		}
		return message;
	}

	//call this once at the beginning of the game to initialize the service
	public void StartScanService() {
		using (AndroidJavaClass ajc = new AndroidJavaClass(extendedClassName)) {
			GameObject.Find("mesg").GetComponent<Text>().text = "asking to start scan service";
			ajc.CallStatic("SendScanServiceIntent");
		}
	}
}


#endif

















